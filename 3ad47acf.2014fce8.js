(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{146:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return u}));var r=t(1),a=t(9),o=(t(0),t(180)),i={id:"json",title:"JSON",sidebar_label:"JSON"},c={id:"json",title:"JSON",description:"[Examples](https://github.com/neon-bindings/examples/tree/master/json)",source:"@site/docs/json.md",permalink:"/docs/json",sidebar_label:"JSON",sidebar:"docs",previous:{title:"Modules",permalink:"/docs/modules"},next:{title:"Errors",permalink:"/docs/errors"}},s=[{value:"Serializing",id:"serializing",children:[]},{value:"Deserializing",id:"deserializing",children:[]},{value:"Macros",id:"macros",children:[]}],l={rightToc:s};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/neon-bindings/examples/tree/master/json"}),"Examples")),Object(o.b)("p",null,"Sometimes you just want to convert a struct in Rust to a ",Object(o.b)("inlineCode",{parentName:"p"},"JsObject")," and back. This can be done with ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/GabrielCastro/neon-serde"}),"neon-serde"),". You will need to install the ",Object(o.b)("inlineCode",{parentName:"p"},"neon-serde")," and ",Object(o.b)("inlineCode",{parentName:"p"},"serde_derive")," crates."),Object(o.b)("p",null,"For more docs on the ",Object(o.b)("inlineCode",{parentName:"p"},"neon-serde")," crate, please see its ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/GabrielCastro/neon-serde"}),"repo")," and ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.rs/crate/neon-serde/0.0.3"}),"docs")),Object(o.b)("p",null,"First we install the following crates:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-toml"}),'# Cargo.toml\n# --snip--\n[dependencies]\nneon = "0.2.0"\nneon-serde = "0.1.1"\nserde_derive = "1.0.80"\nserde = "1.0.80"\n')),Object(o.b)("p",null,"Then import the necessary libraries and declare a ",Object(o.b)("inlineCode",{parentName:"p"},"User")," struct that is marked as deserializable with ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/serde-rs/serde"}),"serde"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"#[macro_use]\nextern crate neon;\n#[macro_use]\nextern crate neon_serde;\n#[macro_use]\nextern crate serde_derive;\n\n#[derive(Serialize)]\nstruct User {\n    name: String,\n    age: u16,\n}\n")),Object(o.b)("h2",{id:"serializing"},"Serializing"),Object(o.b)("p",null,"We can serialize a Rust struct and convert it to a ",Object(o.b)("inlineCode",{parentName:"p"},"JsValue")," like so:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'// --snip--\nfn serialize_something(mut cx: FunctionContext) -> JsResult<JsValue> {\n    let value = AnObject {\n        a: 1,\n        b: vec![2f64, 3f64, 4f64],\n        c: "a string".into()\n    };\n\n    let js_value = neon_serde::to_value(&mut cx, &value)?;\n    Ok(js_value)\n}\n\nregister_module!(mut m, {\n    m.export_function("serialize_something", serialize_something)\n});\n')),Object(o.b)("p",null,"In your ",Object(o.b)("inlineCode",{parentName:"p"},"./lib/index.js")," you can call your function like so:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const addon = require('../native');\naddon.serialize_something();\n")),Object(o.b)("h2",{id:"deserializing"},"Deserializing"),Object(o.b)("p",null,"We need to change the ",Object(o.b)("inlineCode",{parentName:"p"},"User")," trait to be deserializable as well:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"// --snip--\n#[derive(Serialize, Deserialize)]\nstruct User {\n    name: String,\n    age: u16,\n}\n// --snip--\n")),Object(o.b)("p",null,"Now we can also deserialize a ",Object(o.b)("inlineCode",{parentName:"p"},"JsObject")," struct and convert it to a ",Object(o.b)("inlineCode",{parentName:"p"},"JsValue")," like so:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'// --snip--\nfn deserialize_something(mut cx: FunctionContext) -> JsResult<JsValue> {\n    let arg0 = cx.argument::<JsValue>(0)?;\n\n    let arg0_value: AnObject = neon_serde::from_value(&mut cx, arg0)?;\n    println!("{:?}", arg0_value);\n\n    Ok(cx.undefined().upcast())\n}\n\nregister_module!(mut m, {\n    m.export_function("serialize_something", serialize_something)?;\n    m.export_function("deserialize_something", deserialize_something)?;\n    Ok(())\n});\n')),Object(o.b)("p",null,"In your ",Object(o.b)("inlineCode",{parentName:"p"},"./lib/index.js")," you can call your function like so:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const addon = require('../native');\naddon.deserialize_something();\n")),Object(o.b)("h2",{id:"macros"},"Macros"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"neon-serde")," provides some macros for simplifying some of the type signatures of functions. It also handles exporting our functions so we don't have to use the ",Object(o.b)("inlineCode",{parentName:"p"},"register_module!")," macro manually."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'#[macro_use]\nextern crate neon;\n#[macro_use]\nextern crate neon_serde;\n#[macro_use]\nextern crate serde_derive;\n\nexport! {\n    fn say_hello(name: String) -> String {\n        format!("Hello, {}!", name)\n    }\n\n    fn greet(user: User) -> String {\n        format!("{} is {} years old", user.name, user.age)\n    }\n\n    fn fibonacci(n: i32) -> i32 {\n        match n {\n            1 | 2 => 1,\n            n => fibonacci(n - 1) + fibonacci(n - 2)\n        }\n    }\n}\n')),Object(o.b)("p",null,"In our JS we simply import the methods and call the functions. Note that type checks are written for us by the macro:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const addon = require('../native');\n\n// Calling the function with incorrect arguments will fail\n// console.log(addon.say_hello());\n// fails: TypeError: not enough arguments\n\nconsole.log(addon.say_hello('john'));\n// Hello, john!\n\n// Calling the function with incorrect arguments will fail\n// console.log(addon.greet({ name: \"afsd\" }));\n// Error(Msg(\"missing field `age`\"), State { next_error: None, backtrace: None })\n\nconsole.log(addon.fibonacci(32));\n")))}u.isMDXComponent=!0},180:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),u=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c({},n,{},e)),t},b=function(e){var n=u(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=u(t),d=r,m=b["".concat(i,".").concat(d)]||b[d]||p[d]||o;return t?a.a.createElement(m,c({ref:n},l,{components:t})):a.a.createElement(m,c({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);