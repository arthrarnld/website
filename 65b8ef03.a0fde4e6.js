(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{149:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return u})),t.d(n,"default",(function(){return l}));var a=t(1),r=t(9),o=(t(0),t(180)),i={id:"arguments",title:"Arguments",sidebar_label:"Arguments"},s={id:"arguments",title:"Arguments",description:"[Examples](https://github.com/neon-bindings/examples/tree/master/arguments)",source:"@site/docs/arguments.md",permalink:"/docs/arguments",sidebar_label:"Arguments",sidebar:"docs",previous:{title:"Objects",permalink:"/docs/objects"},next:{title:"Type Checking",permalink:"/docs/type-checking"}},u=[{value:"Calling Functions by Indexes",id:"calling-functions-by-indexes",children:[]},{value:"Asserting Argument Types",id:"asserting-argument-types",children:[]},{value:"Getting the Value of an Argument",id:"getting-the-value-of-an-argument",children:[]},{value:"Getting the Number of Arguments",id:"getting-the-number-of-arguments",children:[]},{value:"Optional Arguments",id:"optional-arguments",children:[]},{value:"Default Values",id:"default-values",children:[]}],c={rightToc:u};function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/neon-bindings/examples/tree/master/arguments"}),"Examples")),Object(o.b)("p",null,"Neon provides built-in mechanisims for accessing the ",Object(o.b)("inlineCode",{parentName:"p"},"arguments")," object."),Object(o.b)("p",null,"Arguments can be passed from JS to Rust and be of any type. It is useful to assert that certain values are certain types."),Object(o.b)("h2",{id:"calling-functions-by-indexes"},"Calling Functions by Indexes"),Object(o.b)("p",null,"We first start by defining a function and exporting it by the name of ",Object(o.b)("inlineCode",{parentName:"p"},"sayHi"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'fn say_hi(mut cx: FunctionContext) {}\n\nregister_module!(mut m, {\n    m.export_function("sayHi", say_hi)\n});\n')),Object(o.b)("p",null,"The following code takes the first argument passed to the ",Object(o.b)("inlineCode",{parentName:"p"},"sayHi")," function and throws if it cannot be cast to a function"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"fn say_hi(mut cx: FunctionContext) -> JsResult<JsFunction> {\n    let arg0 = cx.argument::<JsFunction>(0)?;\n    // --snip--\n}\n")),Object(o.b)("h2",{id:"asserting-argument-types"},"Asserting Argument Types"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"pub fn foo(mut cx: FunctionContext) -> JsResult<JsUndefined> {\n    cx.check_argument::<JsString>(0)?;\n    cx.check_argument::<JsNumber>(1)?;\n    Ok(cx.undefined())\n}\n")),Object(o.b)("p",null,"Now in our ",Object(o.b)("inlineCode",{parentName:"p"},"./lib/index.js"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { foo } = require('../native');\nfoo(); // fails\nfoo(12); // fails\nfoo('foobar'); // fails\nfoo('foobar', 12); // passes!\n")),Object(o.b)("h2",{id:"getting-the-value-of-an-argument"},"Getting the Value of an Argument"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'fn add1(mut cx: FunctionContext) -> JsResult<JsNumber> {\n    // Attempt to cast the first argument to a JsNumber. Then\n    // get the value if cast is successul\n    let x = cx.argument::<JsNumber>(0)?.value();\n    Ok(cx.number(x + 1.0))\n}\n\nregister_module!(mut m, {\n    m.export_function("add1", add1)\n});\n')),Object(o.b)("h2",{id:"getting-the-number-of-arguments"},"Getting the Number of Arguments"),Object(o.b)("p",null,"This is a simple example of getting the length of ",Object(o.b)("inlineCode",{parentName:"p"},"arguments")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'pub fn get_args_len(mut cx: FunctionContext) -> JsResult<JsNumber> {\n    let args_length = cx.len();\n    println!("{}", args_length);\n    Ok(cx.number(args_length))\n}\n\nregister_module!(mut m, {\n    m.export_function("getArgsLen", get_args_len)\n});\n')),Object(o.b)("p",null,"Now in our ",Object(o.b)("inlineCode",{parentName:"p"},"./lib/index.js")," we add the following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// ./lib/index.js\nconst { getArgsLen } = require('../native');\ngetArgsLen(); // 0\ngetArgsLen(1); // 1\ngetArgsLen(1, 'foobar'); // 2\n")),Object(o.b)("h2",{id:"optional-arguments"},"Optional Arguments"),Object(o.b)("p",null,"Produces the ",Object(o.b)("inlineCode",{parentName:"p"},"i"),"th argument, or ",Object(o.b)("inlineCode",{parentName:"p"},"None")," if ",Object(o.b)("inlineCode",{parentName:"p"},"i")," is greater than or equal to ",Object(o.b)("inlineCode",{parentName:"p"},"self.len()"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'pub fn args_opt(mut cx: FunctionContext) -> JsResult<JsNumber> {\n    match cx.argument_opt(0) {\n        Some(arg) => {\n            // Throw if the argument exist and it cannot be downcasted\n            // to a number\n            let num = arg.downcast::<JsNumber>().or_throw(&mut cx)?.value();\n            println!"The 0th argument is {}", num);\n        },\n        None => panic!("0th argument does not exist, out of bounds!")\n    }\n    Ok(cx.undefined())\n}\n')),Object(o.b)("h2",{id:"default-values"},"Default Values"),Object(o.b)("p",null,"Handling default values is similar to handling ",Object(o.b)("strong",{parentName:"p"},"Optional Arguments"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'// --snip--\n\npub fn default_args(mut cx: FunctionContext) -> JsResult<JsUndefined> {\n    let age = match cx.argument_opt(0) {\n        Some(arg) => arg.downcast::<JsNumber>().or_throw(&mut cx)?.value(),\n        // Default to 12 if no value is given\n        None => 12 as f64\n    };\n\n    let name = match cx.argument_opt(1) {\n        Some(arg) => arg.downcast::<JsString>().or_throw(&mut cx)?.value(),\n        // Default to 12 if no value is given\n        None => "John Doe".to_string()\n    };\n\n    println!("i am {} years old and my name is {}", age, name);\n\n    Ok(cx.undefined())\n}\n')),Object(o.b)("p",null,"Here's how we'd call those functions:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// ./lib/index.js\nconst { defaultArgs } = require('../native');\n\ndefaultArgs(); // i am 12 years old and my name is John Doe\ndefaultArgs(22); // i am 22 years old and my name is John Doe\ndefaultArgs(22, 'Jane Doe'); // i am 22 years old and my name is Jane Doe\n")))}l.isMDXComponent=!0},180:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return g}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),l=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s({},n,{},e)),t},b=function(e){var n=l(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},p=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),b=l(t),p=a,g=b["".concat(i,".").concat(p)]||b[p]||m[p]||o;return t?r.a.createElement(g,s({ref:n},c,{components:t})):r.a.createElement(g,s({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);