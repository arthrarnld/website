(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{128:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var a=n(1),o=n(7),r=(n(0),n(154)),i={id:"word-counting",title:"Word Counting",sidebar_label:"Word Counting"},l={id:"word-counting",title:"Word Counting",description:"In this guide we're going to recreate the [word counting demo Dave Herman gave in his talk about neon](https://youtu.be/jINMIAicaS0?t=789).",source:"@site/docs/word-counting.md",permalink:"/docs/word-counting",sidebar_label:"Word Counting",sidebar:"docs",previous:{title:"Publishing",permalink:"/docs/publishing"},next:{title:"Roadmap",permalink:"/docs/roadmap"}},s=[{value:"I Take Thee at thy Word",id:"i-take-thee-at-thy-word",children:[]},{value:"Fall Into our Rustic Revelry",id:"fall-into-our-rustic-revelry",children:[]},{value:"Their Thread of Life is Spun",id:"their-thread-of-life-is-spun",children:[]},{value:"Bridge Most Valiantly, with Excellent Discipline",id:"bridge-most-valiantly-with-excellent-discipline",children:[]},{value:"Wherefore\u2019s this Noise?",id:"wherefores-this-noise",children:[]},{value:"Source",id:"source",children:[]}],c={rightToc:s};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"In this guide we're going to recreate the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://youtu.be/jINMIAicaS0?t=789"}),"word counting demo Dave Herman gave in his talk about neon"),"."),Object(r.b)("p",null,"First start by creating a new project with ",Object(r.b)("inlineCode",{parentName:"p"},"neon-cli"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"neon new hello\ncd hello\nnpm install # OR `yarn install`\nnode -e 'require(\"./\")'\n")),Object(r.b)("p",null,"When installing the dependencies, npm will run ",Object(r.b)("inlineCode",{parentName:"p"},"neon build --release")," and build a release build of our code in ",Object(r.b)("inlineCode",{parentName:"p"},"./native"),"."),Object(r.b)("h2",{id:"i-take-thee-at-thy-word"},"I Take Thee at thy Word"),Object(r.b)("p",null,"To illustrate what you can do with Neon, we will a little word counting demo. The demo is simple: read in the complete plays of Shakespeare and count the total number of occurrences of the word \u201cthee\u201d. First lets implement this demo in pure JS. The top-level code splits the corpus into lines, and sums up the counts for each line:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function search(corpus, search) {\n  const ls = lines(corpus);\n  const total = 0;\n  for (let i = 0, n = ls.length; i < n; i++) {\n    total += wcLine(ls[i], search);\n  }\n  return total;\n}\n")),Object(r.b)("p",null,"Searching an individual line involves splitting the line up into word and matching each word against the search string:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function wcLine(line, search) {\n  const words = line.split(' ');\n  const total = 0;\n  for (let i = 0, n = words.length; i < n; i++) {\n    if (matches(words[i], search)) {\n      total++;\n    }\n  }\n  return total;\n}\n")),Object(r.b)("p",null,"The rest of the details are pretty straightforward but definitely check out the code\u2014it\u2019s small and self-contained."),Object(r.b)("h2",{id:"fall-into-our-rustic-revelry"},"Fall Into our Rustic Revelry"),Object(r.b)("p",null,"One of the amazing things about Rust is that highly efficient code can still be remarkably compact and readable. In the Rust version of the algorithm, the code for summing up the counts for all the lines looks pretty similar to the JS code:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"let mut total = 0;\nfor word in line.split(' ') {\n    if matches(word, search) {\n        total += 1;\n    }\n}\ntotal // in Rust you can omit `return` for a trailing expression\n")),Object(r.b)("p",null,"In fact, that same code can be written at a higher level of abstraction without losing performance, using iteration methods like filter and fold (similar to Array.prototype.filter and Array.prototype.reduce in JS):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"line.split(' ')\n    .filter(|word| matches(word, search))\n    .fold(0, |sum, _| sum + 1)\n")),Object(r.b)("p",null,"In my quick experiments, that even seems to shave a few milliseconds off the total running time. I think this is a nice demonstration of the power of Rust\u2019s zero-cost abstractions, where idiomatic and high-level abstractions produce the same or sometimes even better performance (by making additional optimizations possible, like eliminating bounds checks) than lower-level, more obscure code."),Object(r.b)("p",null,"On my machine, the simple Rust translation runs in about 80 \u2013 85ms. Not bad\u2014about 3x as fast just from using Rust, and in roughly the same number of lines of code (60 in JS, 70 in Rust). By the way, I\u2019m being approximate here with the numbers, because this isn\u2019t a remotely scientific benchmark. My goal is just to demonstrate that you can get significant performance improvements from using Rust; in any given situation, the particular details will of course matter."),Object(r.b)("h2",{id:"their-thread-of-life-is-spun"},"Their Thread of Life is Spun"),Object(r.b)("p",null,"We\u2019re not done yet, though! Rust enables something even cooler for Node: we can easily and safely parallelize this code\u2014and I mean without the night-sweats and palpitations usually associated with multithreading. Here\u2019s a quick look at the top level logic in the Rust implementation of the demo:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"let total = cx.borrow(&buffer, |data| {\n    let corpus = str::from_utf8(data.as_slice()).ok().unwrap();\n    wc_parallel(&lines(corpus), search)\n});\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"cx.borrow")," API lets Neon safely expose the raw bytes of a Node Buffer object (i.e., a typed array) to Rust threads, by preventing JS from running in the meantime. And Rust\u2019s concurrency model makes programming with threads actually fun."),Object(r.b)("p",null,"To demonstrate how easy this can be, I used Niko Matsakis\u2019s new Rayon crate of beautiful data parallelism abstractions. Changing the demo to use Rayon is as simple as replacing the into_iter/map/fold/ lines above with:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),"+   lines.into_par_iter()\n      .map(|line| wc_line(line, search))\n      .sum()\n")),Object(r.b)("p",null,"Keep in mind, Rayon wasn\u2019t designed with Neon in mind\u2014its generic primitives match the iteration protocols of Rust, so Neon was able to just pull it off the shelf."),Object(r.b)("p",null,"With that simple change, on my two-core MacBook Air, the demo goes from about 85ms down to about 50ms."),Object(r.b)("h2",{id:"bridge-most-valiantly-with-excellent-discipline"},"Bridge Most Valiantly, with Excellent Discipline"),Object(r.b)("p",null,"I\u2019ve worked on making the integration as seamless as possible. From the Rust side, Neon functions follow a simple protocol, taking a Call object and returning a JavaScript value:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"fn search(mut cx: FunctionContext) -> JsResult<JsNumber> {\n    // ...\n    Ok(cx.number(total))\n}\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"cx"),", a ",Object(r.b)("inlineCode",{parentName:"p"},"FunctionContext")," struct, safely tracks handles into V8\u2019s garbage-collected heap. The Neon API uses the Rust type system to guarantee that your native module can\u2019t crash your app by mismanaging object handles."),Object(r.b)("p",null,"From the JS side, loading the native module is straightforward:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const myNeonModule = require('neon-bridge').load();\n")),Object(r.b)("h2",{id:"wherefores-this-noise"},"Wherefore\u2019s this Noise?"),Object(r.b)("p",null,"I hope this demo is enough to get people interested. Beyond the sheer fun of it, I think the strongest reasons for using Rust in Node are performance and parallelism. As the Rust ecosystem grows, it\u2019ll also be a way to give Node access to cool Rust libraries. Beyond that, I\u2019m hoping that Neon can make a nice abstraction layer that just makes writing native Node modules less painful. With projects like node-uwp it might even be worth exploring evolving Neon towards a JS-engine-agnostic abstraction layer."),Object(r.b)("p",null,"There are lots of possibilities, but I need help! If you want to get involved, I\u2019ve created a community slack (grab an invite from the Slackin app) and a #neon IRC channel on Mozilla IRC (irc.mozilla.org)."),Object(r.b)("h2",{id:"source"},"Source"),Object(r.b)("p",null,"Here is the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/neon-bindings/examples/tree/master/word-counting"}),"source code")," for this guide."))}u.isMDXComponent=!0},154:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),u=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},p=function(e){var t=u(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),b=a,h=p["".concat(i,".").concat(b)]||p[b]||d[b]||r;return n?o.a.createElement(h,l({ref:t},c,{components:n})):o.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);