(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{152:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return o})),t.d(r,"metadata",(function(){return i})),t.d(r,"rightToc",(function(){return s})),t.d(r,"default",(function(){return b}));var n=t(1),a=t(9),c=(t(0),t(177)),o={id:"arrays",title:"Arrays",sidebar_label:"Arrays"},i={id:"arrays",title:"Arrays",description:"[Examples](https://github.com/neon-bindings/examples/tree/master/arrays)",source:"@site/docs/arrays.md",permalink:"/docs/arrays",sidebar_label:"Arrays",sidebar:"docs",previous:{title:"Primitives",permalink:"/docs/primitives"},next:{title:"Objects",permalink:"/docs/objects"}},s=[{value:"Converting from <code>Vec</code> to <code>JsArray</code>",id:"converting-from-vec-to-jsarray",children:[]},{value:"Converting from <code>JsArray</code> to <code>Vec</code>",id:"converting-from-jsarray-to-vec",children:[]},{value:"Returning an empty element",id:"returning-an-empty-element",children:[]},{value:"Adding elements to an array",id:"adding-elements-to-an-array",children:[]},{value:"<code>ArrayBuffer</code>",id:"arraybuffer",children:[]},{value:"Node <code>Buffer</code>",id:"node-buffer",children:[]}],l={rightToc:s};function b(e){var r=e.components,t=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},l,t,{components:r,mdxType:"MDXLayout"}),Object(c.b)("p",null,Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/neon-bindings/examples/tree/master/arrays"}),"Examples")),Object(c.b)("h2",{id:"converting-from-vec-to-jsarray"},"Converting from ",Object(c.b)("inlineCode",{parentName:"h2"},"Vec")," to ",Object(c.b)("inlineCode",{parentName:"h2"},"JsArray")),Object(c.b)("p",null,"Here is a simple example of converting a rust ",Object(c.b)("inlineCode",{parentName:"p"},"Vec")," to a JS ",Object(c.b)("inlineCode",{parentName:"p"},"Array")," using ",Object(c.b)("inlineCode",{parentName:"p"},"JsArray"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-rust"}),"fn convert_vec_to_array(mut cx: FunctionContext) -> JsResult<JsArray> {\n    let vec: Vec<String> = Vec::with_capacity(100);\n\n    // Create the JS array\n    let js_array = JsArray::new(&mut cx, vec.len() as u32);\n\n    // Iterate over the rust Vec and map each value in the Vec to the JS array\n    for (i, obj) in vec.iter().enumerate() {\n        let js_string = cx.string(obj);\n        js_array.set(&mut cx, i as u32, js_string).unwrap();\n    }\n\n    Ok(js_array)\n}\n")),Object(c.b)("h2",{id:"converting-from-jsarray-to-vec"},"Converting from ",Object(c.b)("inlineCode",{parentName:"h2"},"JsArray")," to ",Object(c.b)("inlineCode",{parentName:"h2"},"Vec")),Object(c.b)("p",null,"Converting to ",Object(c.b)("inlineCode",{parentName:"p"},"JsArray")," to ",Object(c.b)("inlineCode",{parentName:"p"},"Vec")," is pretty straightforward:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-rust"}),"fn convert_js_array_to_vec(mut cx: FunctionContext) -> JsResult<JsNumber> {\n    // Take the first argument, which must be an array\n    let js_arr_handle: Handle<JsArray> = cx.argument(0)?;\n    // Convert a JsArray to a Rust Vec\n    let vec: Vec<Handle<JsValue>> = js_arr_handle.to_vec(&mut cx)?;\n    // Return the length of the Vec to JS\n    Ok(cx.number(vec.len() as f64))\n}\n")),Object(c.b)("h2",{id:"returning-an-empty-element"},"Returning an empty element"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-rust"}),"pub fn return_js_array(mut cx: FunctionContext) -> JsResult<JsArray> {\n    Ok(cx.empty_array())\n}\n")),Object(c.b)("h2",{id:"adding-elements-to-an-array"},"Adding elements to an array"),Object(c.b)("p",null,"This is an example of adding a number to a ",Object(c.b)("inlineCode",{parentName:"p"},"JsArray")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-rust"}),"pub fn return_js_array_with_number(mut cx: FunctionContext) -> JsResult<JsArray> {\n    let array: Handle<JsArray> = JsArray::new(&mut cx, 1);\n    let n = cx.number(9000.0);\n    array.set(&mut cx, 0, n)?;\n    Ok(array)\n}\n")),Object(c.b)("p",null,"And this is an example of adding a string to a ",Object(c.b)("inlineCode",{parentName:"p"},"JsArray")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-rust"}),'pub fn return_js_array_with_string(mut cx: FunctionContext) -> JsResult<JsArray> {\n    let array: Handle<JsArray> = JsArray::new(&mut cx, 1);\n    let s = cx.string("hello node");\n    array.set(&mut cx, 0, s)?;\n    Ok(array)\n}\n')),Object(c.b)("h2",{id:"arraybuffer"},Object(c.b)("inlineCode",{parentName:"h2"},"ArrayBuffer")),Object(c.b)("p",null,"Neon also provides support for the ES6 ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"}),"ArrayBuffer")," as through the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.rs/neon/*/neon/prelude/struct.JsArrayBuffer.html"}),Object(c.b)("inlineCode",{parentName:"a"},"JsArrayBuffer"))," struct. It has the same constructor and methods as ",Object(c.b)("inlineCode",{parentName:"p"},"JsArray")),Object(c.b)("h2",{id:"node-buffer"},"Node ",Object(c.b)("inlineCode",{parentName:"h2"},"Buffer")),Object(c.b)("p",null,"The Node Buffer type is also supported by Neon through the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.rs/neon/*/neon/prelude/struct.JsBuffer.html"}),Object(c.b)("inlineCode",{parentName:"a"},"JsBuffer"))," struct. It as the same constructor and methods as ",Object(c.b)("inlineCode",{parentName:"p"},"JsArray")),Object(c.b)("h4",{id:"runnable-example"},"Runnable Example"),Object(c.b)("p",null,"For a working example of using Node's ",Object(c.b)("inlineCode",{parentName:"p"},"Buffer")," class with Neon, see the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/neon-bindings/examples/tree/master/sharing-binary-data"}),Object(c.b)("inlineCode",{parentName:"a"},"sharing-binary-data")," example"),". You can get started with it by running the following commands:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"git clone https://github.com/neon-bindings/examples\ncd sharing-binary-data\nnpm install\n")))}b.isMDXComponent=!0},177:function(e,r,t){"use strict";t.d(r,"a",(function(){return u})),t.d(r,"b",(function(){return d}));var n=t(0),a=t.n(n);function c(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){c(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),b=function(e){var r=a.a.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i({},r,{},e)),t},u=function(e){var r=b(e.components);return a.a.createElement(l.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return a.a.createElement(a.a.Fragment,{},r)}},m=Object(n.forwardRef)((function(e,r){var t=e.components,n=e.mdxType,c=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=b(t),m=n,d=u["".concat(o,".").concat(m)]||u[m]||p[m]||c;return t?a.a.createElement(d,i({ref:r},l,{components:t})):a.a.createElement(d,i({ref:r},l))}));function d(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var c=t.length,o=new Array(c);o[0]=m;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var l=2;l<c;l++)o[l]=t[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);