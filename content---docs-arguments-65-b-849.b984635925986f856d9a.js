(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{167:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return l}));t(58),t(31),t(21),t(22),t(59),t(0);var a=t(217);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var o={id:"arguments",title:"Arguments",sidebar_label:"Arguments"},s=[{value:"Calling Functions by Indexes",id:"calling-functions-by-indexes",children:[]},{value:"Asserting Argument Types",id:"asserting-argument-types",children:[]},{value:"Getting the Value of an Argument",id:"getting-the-value-of-an-argument",children:[]},{value:"Getting the Number of Arguments",id:"getting-the-number-of-arguments",children:[]},{value:"Optional Arguments",id:"optional-arguments",children:[]},{value:"Default Values",id:"default-values",children:[]}],u={rightToc:s},i="wrapper";function l(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,["components"]);return Object(a.b)(i,r({},u,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/neon-bindings/examples/tree/master/arguments"}),"Examples")),Object(a.b)("p",null,"Neon provides built-in mechanisims for accessing the ",Object(a.b)("inlineCode",{parentName:"p"},"arguments")," object."),Object(a.b)("p",null,"Arguments can be passed from JS to Rust and be of any type. It is useful to assert that certain values are certain types."),Object(a.b)("h2",{id:"calling-functions-by-indexes"},"Calling Functions by Indexes"),Object(a.b)("p",null,"We first start by defining a function and exporting it by the name of ",Object(a.b)("inlineCode",{parentName:"p"},"sayHi"),":"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-rust"}),'fn say_hi(mut cx: FunctionContext) {}\n\nregister_module!(mut m, {\n    m.export_function("sayHi", say_hi)\n});\n')),Object(a.b)("p",null,"The following code takes the first argument passed to the ",Object(a.b)("inlineCode",{parentName:"p"},"sayHi")," function and throws if it cannot be cast to a function"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-rust"}),"fn say_hi(mut cx: FunctionContext) -> JsResult<JsFunction> {\n    let arg0 = cx.argument::<JsFunction>(0)?;\n    // --snip--\n}\n")),Object(a.b)("h2",{id:"asserting-argument-types"},"Asserting Argument Types"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-rust"}),"pub fn foo(mut cx: FunctionContext) -> JsResult<JsUndefined> {\n    cx.check_argument::<JsString>(0)?;\n    cx.check_argument::<JsNumber>(1)?;\n    Ok(cx.undefined())\n}\n")),Object(a.b)("p",null,"Now in our ",Object(a.b)("inlineCode",{parentName:"p"},"./lib/index.js"),":"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"const { foo } = require('../native');\nfoo(); // fails\nfoo(12); // fails\nfoo('foobar'); // fails\nfoo('foobar', 12); // passes!\n")),Object(a.b)("h2",{id:"getting-the-value-of-an-argument"},"Getting the Value of an Argument"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-rust"}),'fn add1(mut cx: FunctionContext) -> JsResult<JsNumber> {\n    // Attempt to cast the first argument to a JsNumber. Then\n    // get the value if cast is successul\n    let x = cx.argument::<JsNumber>(0)?.value();\n    Ok(cx.number(x + 1.0))\n}\n\nregister_module!(mut m, {\n    m.export_function("add1", add1)\n});\n')),Object(a.b)("h2",{id:"getting-the-number-of-arguments"},"Getting the Number of Arguments"),Object(a.b)("p",null,"This is a simple example of getting the length of ",Object(a.b)("inlineCode",{parentName:"p"},"arguments")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-rust"}),'pub fn get_args_len(mut cx: FunctionContext) -> JsResult<JsNumber> {\n    let args_length = cx.len();\n    println!("{}", args_length);\n    Ok(cx.number(args_length))\n}\n\nregister_module!(mut m, {\n    m.export_function("getArgsLen", get_args_len)\n});\n')),Object(a.b)("p",null,"Now in our ",Object(a.b)("inlineCode",{parentName:"p"},"./lib/index.js")," we add the following:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"// ./lib/index.js\nconst { getArgsLen } = require('../native');\ngetArgsLen(); // 0\ngetArgsLen(1); // 1\ngetArgsLen(1, 'foobar'); // 2\n")),Object(a.b)("h2",{id:"optional-arguments"},"Optional Arguments"),Object(a.b)("p",null,"Produces the ",Object(a.b)("inlineCode",{parentName:"p"},"i"),"th argument, or ",Object(a.b)("inlineCode",{parentName:"p"},"None")," if ",Object(a.b)("inlineCode",{parentName:"p"},"i")," is greater than or equal to ",Object(a.b)("inlineCode",{parentName:"p"},"self.len()"),"."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-rust"}),'pub fn args_opt(mut cx: FunctionContext) -> JsResult<JsNumber> {\n    match cx.argument_opt(0) {\n        Some(arg) => {\n            // Throw if the argument exist and it cannot be downcasted\n            // to a number\n            let num = arg.downcast::<JsNumber>().or_throw(&mut cx)?.value();\n            println!"The 0th argument is {}", num);\n        },\n        None => panic!("0th argument does not exist, out of bounds!")\n    }\n    Ok(cx.undefined())\n}\n')),Object(a.b)("h2",{id:"default-values"},"Default Values"),Object(a.b)("p",null,"Handling default values is similar to handling ",Object(a.b)("strong",{parentName:"p"},"Optional Arguments"),":"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-rust"}),'// --snip--\n\npub fn default_args(mut cx: FunctionContext) -> JsResult<JsUndefined> {\n    let age = match cx.argument_opt(0) {\n        Some(arg) => arg.downcast::<JsNumber>().or_throw(&mut cx)?.value(),\n        // Default to 12 if no value is given\n        None => 12 as f64\n    };\n\n    let name = match cx.argument_opt(1) {\n        Some(arg) => arg.downcast::<JsString>().or_throw(&mut cx)?.value(),\n        // Default to 12 if no value is given\n        None => "John Doe".to_string()\n    };\n\n    println!("i am {} years old and my name is {}", age, name);\n\n    Ok(cx.undefined())\n}\n')),Object(a.b)("p",null,"Here's how we'd call those functions:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"// ./lib/index.js\nconst { defaultArgs } = require('../native');\n\ndefaultArgs(); // i am 12 years old and my name is John Doe\ndefaultArgs(22); // i am 22 years old and my name is John Doe\ndefaultArgs(22, 'Jane Doe'); // i am 22 years old and my name is Jane Doe\n")))}l.isMDXComponent=!0},217:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a),o=r.a.createContext({}),s=function(e){var n=r.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},u=function(e){var n=s(e.components);return r.a.createElement(o.Provider,{value:n},e.children)};var i="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},c=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,i=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),c=s(t),m=a,b=c[u+"."+m]||c[m]||l[m]||o;return t?r.a.createElement(b,Object.assign({},{ref:n},i,{components:t})):r.a.createElement(b,Object.assign({},{ref:n},i))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=c;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u[i]="string"==typeof e?e:a,s[1]=u;for(var m=2;m<o;m++)s[m]=t[m];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,t)}c.displayName="MDXCreateElement"}}]);