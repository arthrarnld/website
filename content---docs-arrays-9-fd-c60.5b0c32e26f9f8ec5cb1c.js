(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{157:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return o})),r.d(n,"rightToc",(function(){return c})),r.d(n,"default",(function(){return l}));r(58),r(31),r(21),r(22),r(59),r(0);var t=r(217);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e}).apply(this,arguments)}var o={id:"arrays",title:"Arrays",sidebar_label:"Arrays"},c=[{value:"Converting from Vec to JsArray",id:"converting-from-vec-to-jsarray",children:[]},{value:"Converting from JsArray to Vec",id:"converting-from-jsarray-to-vec",children:[]},{value:"Returning an empty element",id:"returning-an-empty-element",children:[]},{value:"Adding elements to an array",id:"adding-elements-to-an-array",children:[]},{value:"ArrayBuffer",id:"arraybuffer",children:[]},{value:"Node Buffer",id:"node-buffer",children:[]}],i={rightToc:c},s="wrapper";function l(e){var n=e.components,r=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,["components"]);return Object(t.b)(s,a({},i,r,{components:n,mdxType:"MDXLayout"}),Object(t.b)("p",null,Object(t.b)("a",a({parentName:"p"},{href:"https://github.com/neon-bindings/examples/tree/master/arrays"}),"Examples")),Object(t.b)("h2",{id:"converting-from-vec-to-jsarray"},"Converting from ",Object(t.b)("inlineCode",{parentName:"h2"},"Vec")," to ",Object(t.b)("inlineCode",{parentName:"h2"},"JsArray")),Object(t.b)("p",null,"Here is a simple example of converting a rust ",Object(t.b)("inlineCode",{parentName:"p"},"Vec")," to a JS ",Object(t.b)("inlineCode",{parentName:"p"},"Array")," using ",Object(t.b)("inlineCode",{parentName:"p"},"JsArray"),":"),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{className:"language-rust"}),"fn convert_vec_to_array(mut cx: FunctionContext) -> JsResult<JsArray> {\n    let vec: Vec<String> = Vec::with_capacity(100);\n\n    // Create the JS array\n    let js_array = JsArray::new(&mut cx, vec.len() as u32);\n\n    // Iterate over the rust Vec and map each value in the Vec to the JS array\n    for (i, obj) in vec.iter().enumerate() {\n        let js_string = cx.string(obj);\n        js_array.set(&mut cx, i as u32, js_string).unwrap();\n    }\n\n    Ok(js_array)\n}\n")),Object(t.b)("h2",{id:"converting-from-jsarray-to-vec"},"Converting from ",Object(t.b)("inlineCode",{parentName:"h2"},"JsArray")," to ",Object(t.b)("inlineCode",{parentName:"h2"},"Vec")),Object(t.b)("p",null,"Converting to ",Object(t.b)("inlineCode",{parentName:"p"},"JsArray")," to ",Object(t.b)("inlineCode",{parentName:"p"},"Vec")," is pretty straightforward:"),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{className:"language-rust"}),"fn convert_js_array_to_vec(mut cx: FunctionContext) -> JsResult<JsNumber> {\n    // Take the first argument, which must be an array\n    let js_arr_handle: Handle<JsArray> = cx.argument(0)?;\n    // Convert a JsArray to a Rust Vec\n    let vec: Vec<Handle<JsValue>> = js_arr_handle.to_vec(&mut cx)?;\n    // Return the length of the Vec to JS\n    Ok(cx.number(vec.len() as f64))\n}\n")),Object(t.b)("h2",{id:"returning-an-empty-element"},"Returning an empty element"),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{className:"language-rust"}),"pub fn return_js_array(mut cx: FunctionContext) -> JsResult<JsArray> {\n    Ok(cx.empty_array())\n}\n")),Object(t.b)("h2",{id:"adding-elements-to-an-array"},"Adding elements to an array"),Object(t.b)("p",null,"This is an example of adding a number to a ",Object(t.b)("inlineCode",{parentName:"p"},"JsArray")),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{className:"language-rust"}),"pub fn return_js_array_with_number(mut cx: FunctionContext) -> JsResult<JsArray> {\n    let array: Handle<JsArray> = JsArray::new(&mut cx, 1);\n    let n = cx.number(9000.0);\n    array.set(&mut cx, 0, n)?;\n    Ok(array)\n}\n")),Object(t.b)("p",null,"And this is an example of adding a string to a ",Object(t.b)("inlineCode",{parentName:"p"},"JsArray")),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{className:"language-rust"}),'pub fn return_js_array_with_string(mut cx: FunctionContext) -> JsResult<JsArray> {\n    let array: Handle<JsArray> = JsArray::new(&mut cx, 1);\n    let s = cx.string("hello node");\n    array.set(&mut cx, 0, s)?;\n    Ok(array)\n}\n')),Object(t.b)("h2",{id:"arraybuffer"},Object(t.b)("inlineCode",{parentName:"h2"},"ArrayBuffer")),Object(t.b)("p",null,"Neon also provides support for the ES6 ",Object(t.b)("a",a({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"}),"ArrayBuffer")," as through the ",Object(t.b)("a",a({parentName:"p"},{href:"https://neon-bindings.com/api/neon/prelude/struct.jsarraybuffer"}),Object(t.b)("inlineCode",{parentName:"a"},"JsArrayBuffer"))," struct. It has the same constructor and methods as ",Object(t.b)("inlineCode",{parentName:"p"},"JsArray")),Object(t.b)("h2",{id:"node-buffer"},"Node ",Object(t.b)("inlineCode",{parentName:"h2"},"Buffer")),Object(t.b)("p",null,"The Node Buffer type is also supported by Neon through the ",Object(t.b)("a",a({parentName:"p"},{href:"https://neon-bindings.com/api/neon/prelude/struct.jsbuffer"}),Object(t.b)("inlineCode",{parentName:"a"},"JsBuffer"))," struct. It as the same constructor and methods as ",Object(t.b)("inlineCode",{parentName:"p"},"JsArray")),Object(t.b)("h4",{id:"runnable-example"},"Runnable Example"),Object(t.b)("p",null,"For a working example of using Node's ",Object(t.b)("inlineCode",{parentName:"p"},"Buffer")," class with Neon, see the ",Object(t.b)("a",a({parentName:"p"},{href:"https://github.com/neon-bindings/examples/tree/master/sharing-binary-data"}),Object(t.b)("inlineCode",{parentName:"a"},"sharing-binary-data")," example"),". You can get started with it by running the following commands:"),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{className:"language-bash"}),"git clone https://github.com/neon-bindings/examples\ncd sharing-binary-data\nnpm install\n")))}l.isMDXComponent=!0},217:function(e,n,r){"use strict";r.d(n,"a",(function(){return i})),r.d(n,"b",(function(){return b}));var t=r(0),a=r.n(t),o=a.a.createContext({}),c=function(e){var n=a.a.useContext(o),r=n;return e&&(r="function"==typeof e?e(n):Object.assign({},n,e)),r},i=function(e){var n=c(e.components);return a.a.createElement(o.Provider,{value:n},e.children)};var s="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=Object(t.forwardRef)((function(e,n){var r=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,s=function(e,n){var r={};for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&-1===n.indexOf(t)&&(r[t]=e[t]);return r}(e,["components","mdxType","originalType","parentName"]),u=c(r),b=t,p=u[i+"."+b]||u[b]||l[b]||o;return r?a.a.createElement(p,Object.assign({},{ref:n},s,{components:r})):a.a.createElement(p,Object.assign({},{ref:n},s))}));function b(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=r.length,c=new Array(o);c[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[s]="string"==typeof e?e:t,c[1]=i;for(var b=2;b<o;b++)c[b]=r[b];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"}}]);