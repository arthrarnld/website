(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{181:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"rightToc",(function(){return o})),t.d(n,"default",(function(){return i}));t(58),t(31),t(21),t(22),t(59),t(0);var a=t(217);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var s={id:"async",title:"Async Tasks",sidebar_label:"Async Tasks"},o=[{value:"Output",id:"output",children:[]},{value:"Error",id:"error",children:[]},{value:"JsEvent",id:"jsevent",children:[]},{value:".perform()",id:"perform",children:[]},{value:".complete()",id:"complete",children:[]},{value:".schedule(f)",id:"schedulef",children:[]},{value:"Calling Async Tasks",id:"calling-async-tasks",children:[]},{value:"Handling Failing Tasks",id:"handling-failing-tasks",children:[]},{value:"Promises",id:"promises",children:[]},{value:"Runnable Example",id:"runnable-example",children:[]}],c={rightToc:o},l="wrapper";function i(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,["components"]);return Object(a.b)(l,r({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/neon-bindings/examples/tree/master/async"}),"Examples")),Object(a.b)("p",null,"Tasks let you execute asynchronous background tasks that run in the Node thread pool. Behind the scenes, Neon is using N-API's microtasks API. Microtasks are the backing implementation of Promises and Callbacks in a JS Engine. For more on microtasks, see ",Object(a.b)("a",r({parentName:"p"},{href:"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"}),'"Tasks, microtasks, queues and schedules"')),Object(a.b)("p",null,"Let's look at a minimal implementation of an async task:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-rust"}),'use neon::prelude::*;\n\nstruct BackgroundTask;\n\nimpl Task for BackgroundTask {\n    type Output = i32;\n    type Error = String;\n    type JsEvent = JsNumber;\n\n    fn perform(&self) -> Result<Self::Output, Self::Error> {\n        Ok(17)\n    }\n\n    fn complete(self, mut cx: TaskContext, result: Result<Self::Output, Self::Error>) -> JsResult<Self::JsEvent> {\n        Ok(cx.number(result.unwrap()))\n    }\n}\n\npub fn perform_async_task(mut cx: FunctionContext) -> JsResult<JsUndefined> {\n    let f = cx.argument::<JsFunction>(0)?;\n    BackgroundTask.schedule(f);\n    Ok(cx.undefined())\n}\n\nregister_module!(mut m, {\n    m.export_function("performAsyncTask", perform_async_task)\n});\n')),Object(a.b)("h3",{id:"output"},"Output"),Object(a.b)("p",null,"The task's result type, which is sent back to the main thread to communicate a successful result back to JavaScript."),Object(a.b)("h3",{id:"error"},"Error"),Object(a.b)("p",null,"The task's error type, which is sent back to the main thread to communicate a task failure back to JavaScript."),Object(a.b)("h3",{id:"jsevent"},"JsEvent"),Object(a.b)("p",null,"The type of JavaScript value that gets produced to the asynchronous callback on the main thread after the task is completed."),Object(a.b)("h3",{id:"perform"},Object(a.b)("inlineCode",{parentName:"h3"},".perform()")),Object(a.b)("p",null,"Perform the task, producing either a successful ",Object(a.b)("inlineCode",{parentName:"p"},"Output")," or an unsuccessful ",Object(a.b)("inlineCode",{parentName:"p"},"Error"),". This method is executed in a background\nthread as part of libuv's built-in thread pool."),Object(a.b)("h3",{id:"complete"},Object(a.b)("inlineCode",{parentName:"h3"},".complete()")),Object(a.b)("p",null,"Convert the result of the task to a JavaScript value to be passed to the asynchronous callback. This method is executed on the main\nthread at some point after the background task is completed."),Object(a.b)("h3",{id:"schedulef"},Object(a.b)("inlineCode",{parentName:"h3"},".schedule(f)")),Object(a.b)("p",null,"Schedule a task to be executed on a background thread. ",Object(a.b)("inlineCode",{parentName:"p"},"callback")," should have the following signature:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"function callback(err, value) {}\n")),Object(a.b)("h2",{id:"calling-async-tasks"},"Calling Async Tasks"),Object(a.b)("p",null,"Now let's look at how we would schedule async task using the ",Object(a.b)("inlineCode",{parentName:"p"},"BackgroundTask")," struct we created:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),'const { performAsyncTask } = require("../native");\n\n// Iterate 10,0000 times in background thread\nperformAsyncTask((err, value) => {\n  let count = 10;\n  for (let i = 0; i < 100000; i++) {\n    count++;\n  }\n  console.log(count, "first sum from background thread");\n});\n\n// Iterate 10 times\nlet count = 10;\nfor (let i = 0; i < 10; i++) {\n  count++;\n}\nconsole.log(count, "second sum from main thread");\n')),Object(a.b)("p",null,"If you run this code you will get the following results:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"20 'second sum from main thread'\n100010 'first sum from background thread'\n")),Object(a.b)("p",null,"If ",Object(a.b)("inlineCode",{parentName:"p"},"performAsyncTask()")," were executed synchronously then the background thread would finish running before the main thread finishes and the results would be:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"100010 'first sum from background thread'\n20 'second sum from main thread'\n")),Object(a.b)("h2",{id:"handling-failing-tasks"},"Handling Failing Tasks"),Object(a.b)("p",null,"If we wanted our previous example to throw an error we could simple replace the ",Object(a.b)("inlineCode",{parentName:"p"},"perform")," and ",Object(a.b)("inlineCode",{parentName:"p"},"complete")," methods with the following:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-rust"}),'// --snip--\nfn perform(&self) -> Result<Self::Output, Self::Error> {\n    Err(format!("I am a failing task"))\n}\n\nfn complete(self, mut cx: TaskContext, result: Result<Self::Output, Self::Error>) -> JsResult<Self::JsEvent> {\n    cx.throw_error(&result.unwrap_err())\n}\n// --snip--\n')),Object(a.b)("h2",{id:"promises"},"Promises"),Object(a.b)("p",null,"If we wanted to wrap our task around a promise, we could do that like so:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),'// ./lib/index.js\nconst { performAsyncTask } = require("../native");\n\n// Iterate 10,0000 times in background thread\nconst promisePerformAsyncTask = () => {\n  return new Promise((resolve, reject) => {\n    performAsyncTask((err, res) => {\n      let count = 10;\n      for (let i = 0; i < 100000; i++) {\n        count++;\n      }\n      console.log(count, "first sum from background thread");\n    });\n  });\n};\n')),Object(a.b)("h2",{id:"runnable-example"},"Runnable Example"),Object(a.b)("p",null,"For another example of tasks, you can clone and run ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/neon-bindings/examples/tree/master/fibonacci-async-task"}),"fibonacci-async-task"),":"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"git clone https://github.com/neon-bindings/examples\ncd fibonacci-async-task\nnpm install\n")),Object(a.b)("p",null,"This example computes the ",Object(a.b)("inlineCode",{parentName:"p"},"100000"),"th fibonacci number on a background thread while keeping the main thread free"))}i.isMDXComponent=!0},217:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return p}));var a=t(0),r=t.n(a),s=r.a.createContext({}),o=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},c=function(e){var n=o(e.components);return r.a.createElement(s.Provider,{value:n},e.children)};var l="mdxType",i={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,l=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),u=o(t),p=a,b=u[c+"."+p]||u[p]||i[p]||s;return t?r.a.createElement(b,Object.assign({},{ref:n},l,{components:t})):r.a.createElement(b,Object.assign({},{ref:n},l))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=u;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c[l]="string"==typeof e?e:a,o[1]=c;for(var p=2;p<s;p++)o[p]=t[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);